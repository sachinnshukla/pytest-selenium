# üéØ BEGINNER-FRIENDLY CI/CD FILE
# This file tells GitHub to automatically run your tests
# Every time you push code to GitHub, this will run

name: üß™ Automated Selenium Tests

# When should this run? 
# Answer: When you push code to main branch (that's it!)
on:
  push:
    branches: [ main, master ]  # Run when you push to main/master
  pull_request:
    branches: [ main, master ]  # Run when someone creates a pull request

# What should happen when this runs?
jobs:
  test:
    # What computer should run this? Ubuntu (Linux)
    runs-on: ubuntu-latest
    
    # Permissions needed for GitHub Pages deployment
    permissions:
      contents: read
      pages: write
      id-token: write
    
    # What steps should it do?
    steps:
    
    # Step 1: Get your code from GitHub
    - name: üì• Get Code from GitHub
      uses: actions/checkout@v4
    
    # Step 2: Install Python (like installing Python on a new computer)
    - name: üêç Setup Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    # Step 3: Install Chrome browser (for Selenium)
    - name: üåê Install Chrome Browser
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    # Step 4: Install your Python packages (like pip install)
    - name: üì¶ Install Python Packages
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Step 5: Run your actual tests!
    - name: üß™ Run Selenium Tests
      run: |
        pytest tests/ --alluredir=allure-results -v
    
    # Step 6: Install Allure (for pretty reports)
    - name: üìä Install Allure
      run: |
        sudo apt-get update
        sudo apt-get install -y default-jre
        wget https://github.com/allure-framework/allure2/releases/download/2.24.1/allure-2.24.1.tgz
        tar -zxf allure-2.24.1.tgz
        sudo mv allure-2.24.1 /opt/allure
        echo "/opt/allure/bin" >> $GITHUB_PATH
    
    # Step 7: Generate pretty HTML reports
    - name: üìà Generate Allure Report
      if: always()  # Do this even if tests failed
      run: |
        if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
          allure generate allure-results -o allure-report --clean
          echo "‚úÖ Allure report generated successfully"
        else
          echo "‚ö†Ô∏è No allure-results found, creating basic report"
          mkdir -p allure-report
          cat > allure-report/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Test Results</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .header { color: #ff6b6b; text-align: center; margin-bottom: 30px; }
                .info { background: #fff3cd; padding: 15px; border-radius: 4px; border-left: 4px solid #ffc107; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1 class="header">üß™ Selenium Test Results</h1>
                <div class="info">
                    <h3>‚ö†Ô∏è No Test Results Available</h3>
                    <p>The test execution did not generate Allure results. This could mean:</p>
                    <ul>
                        <li>Tests were not run with --alluredir parameter</li>
                        <li>Test execution failed before generating results</li>
                        <li>No tests were found to execute</li>
                    </ul>
                    <p><strong>Next Steps:</strong></p>
                    <ul>
                        <li>Check the GitHub Actions logs for test execution details</li>
                        <li>Ensure tests are running successfully</li>
                        <li>Verify Allure reporting configuration</li>
                    </ul>
                </div>
                <hr style="margin: 30px 0;">
                <p style="text-align: center; color: #666;">
                    <small>Generated by GitHub Actions ‚Ä¢ $(date)</small>
                </p>
            </div>
        </body>
        </html>
        EOF
        fi
    
    # Step 8: Save the reports so you can download them (only on non-main branches)
    - name: üíæ Upload Test Results
      if: always() && github.ref != 'refs/heads/main'  # Skip on main branch (use Pages instead)
      uses: actions/upload-artifact@v4
      with:
        name: allure-report-${{ github.run_number }}
        path: allure-report/
    
    # Step 9: Save screenshots if any were taken
    - name: üì∏ Upload Screenshots
      if: always()  # Do this even if tests failed
      uses: actions/upload-artifact@v4
      with:
        name: screenshots-${{ github.run_number }}
        path: results/screenshots/
      continue-on-error: true  # Don't fail if no screenshots exist
    
    # Step 10: Setup GitHub Pages (for live dashboard)
    - name: üåê Setup GitHub Pages
      if: always() && github.ref == 'refs/heads/main'  # Only on main branch
      uses: actions/configure-pages@v4
    
    # Step 11: Upload Allure report to GitHub Pages
    - name: üì§ Upload to GitHub Pages
      if: always() && github.ref == 'refs/heads/main'  # Only on main branch
      uses: actions/upload-pages-artifact@v3
      with:
        path: allure-report/
    
    # Step 12: Deploy to GitHub Pages (creates live dashboard!)
    - name: üöÄ Deploy to GitHub Pages
      if: always() && github.ref == 'refs/heads/main'  # Only on main branch
      uses: actions/deploy-pages@v4
    
    # Step 13: Send WhatsApp Success Notification
    - name: üì± Send WhatsApp Success Notification
      if: success() && github.ref == 'refs/heads/main'
      env:
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
        TWILIO_WHATSAPP_FROM: whatsapp:+14155238886
        TWILIO_WHATSAPP_TO: ${{ secrets.TWILIO_WHATSAPP_TO }}
      run: |
        python utils/whatsapp_notifier.py success https://sachinnshukla.github.io/pytest-selenium/
      continue-on-error: true
    
    # Step 14: Send WhatsApp Failure Notification  
    - name: üì± Send WhatsApp Failure Notification
      if: failure()
      env:
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
        TWILIO_WHATSAPP_FROM: whatsapp:+14155238886
        TWILIO_WHATSAPP_TO: ${{ secrets.TWILIO_WHATSAPP_TO }}
      run: |
        python utils/whatsapp_notifier.py failure
      continue-on-error: true
